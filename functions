#Functions and Methosa
#Reference 
# https://www.datacamp.com/community/tutorials/functions-python-tutorial
----------------
# Define a function `plus()`

def plus(a,b):
  
	return a + b
  
#-----------------------------
# Create a `Summation` class

class Summation(object):

  def sum(self, a, b):
 
    self.contents = a + b
   
    return self.contents 


#-----------------------------
# Instantiate `Summation` class to call `sum()`

sumInstance = Summation()

sumInstance.sum(1,2)

#-----------------------------
def hello():
  
  print("Hello World") 
  
  return 


#-----------------------------
def hello():
  name = str(input("Enter your name: "))
  if name:
    print ("Hello " + str(name))
  else:
    print("Hello World") 
  return 
  
hello()


#-----------------------------

def hello():
  print("Hello World") 
  return("hello")

def hello_noreturn():
  print("Hello World")
  
# Multiply the output of `hello()` with 2 
hello() * 2

# (Try to) multiply the output of `hello_noreturn()` with 2 
hello_noreturn() * 2


#-----------------------------

def run():
  for x in range(10):
     if x == 2:
       return
  print("Run!")
  
run()

#-----------------------------

# Define `plus()`
def plus(a,b):
  sum = a + b
  return (sum, a)

# Call `plus()` and unpack variables 
sum, a = plus(3,4)

# Print `sum()`
print(sum)



#keyword Arguments
#-----------------

# Define `plus()` function
def plus(a,b):
  return a + b
  
# Call `plus()` function with parameters 
plus(2,3)

# Call `plus()` function with keyword arguments
plus(a=1, b=2)

#--------------------

# Define `plus()` function
def plus(a,b):
  return a + b
  
# Call `plus()` function with keyword arguments
plus(b=2, a=1)


#Variable number of args
#-----------------------
# Define `plus()` function to accept a variable number of arguments
def plus(*args):
  return sum(args)

# Calculate the sum
plus(1,4,5)


# Define `plus()` function to accept a variable number of arguments
def plus(*args):
  total = 0
  for i in args:
    total += i
  return total

# Calculate the sum  
plus(20,30,40,50)




#Global Vs NonGlobal Varibales
#-----------------------------
# Global variable `init`
init = 1

# Define `plus()` function to accept a variable number of arguments
def plus(*args):
  # Local variable `sum()`
  total = 0
  for i in args:
    total += i
  return total
  
# Access the global variable
print("this is the initialized value " + str(init))

# (Try to) access the local variable
print("this is the sum " + str(total))




#Anonymous functions in python
#-----------------------------
double = lambda x: x*2

double(5)


# `sum()` lambda function
sum = lambda x, y: x + y;

# Call the `sum()` anonymous function
sum(4,5)

# "Translate" to a UDF
def sum(x, y):
  return x+y



#place where lambda function work
#--------------------------------
from functools import reduce

my_list = [1,2,3,4,5,6,7,8,9,10]

# Use lambda function with `filter()`
filtered_list = list(filter(lambda x: (x*2 > 10), my_list))

# Use lambda function with `map()`
mapped_list = list(map(lambda x: x*2, my_list))

# Use lambda function with `reduce()`
reduced_list = reduce(lambda x, y: x+y, my_list)

print(filtered_list)
print(mapped_list)
print(reduced_list)



#----------------------------------
#this is not necessarily needed for Python. However, including a main() function in your Python program can be handy to structure your code
# Define `main()` function
def main():
  hello()
  print("This is a main function")

